name: Deploy to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-1
  PROJECT_NAME: wordpress-docker
  ENVIRONMENT: production

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: cdk/package-lock.json

      - name: Install CDK dependencies
        working-directory: ./cdk
        run: npm ci

      - name: Build CDK
        working-directory: ./cdk
        run: npm run build

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy CDK stacks
        working-directory: ./cdk
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          AWS_REGION: ${{ env.AWS_REGION }}
          RDS_DATABASE_NAME: wordpress
          ECS_TASK_CPU: '512'
          ECS_TASK_MEMORY: '1024'
          ECS_DESIRED_COUNT: '2'
          ECS_MIN_CAPACITY: '2'
          ECS_MAX_CAPACITY: '10'
          ENABLE_WAF: 'false'
        run: |
          npx cdk deploy --all --require-approval never

      - name: Force ECS service update
        run: |
          aws ecs update-service \
            --cluster ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-cluster \
            --service ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for ECS service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-cluster \
            --services ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-service \
            --region ${{ env.AWS_REGION }}

      - name: Get deployment outputs
        id: outputs
        run: |
          CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-CloudFrontStack \
            --query 'Stacks[0].Outputs[?OutputKey==`WordPressUrl`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "cloudfront_url=$CLOUDFRONT_URL" >> $GITHUB_OUTPUT

      - name: Deployment summary
        run: |
          echo "### Deployment Successful! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**WordPress URL:** ${{ steps.outputs.outputs.cloudfront_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
